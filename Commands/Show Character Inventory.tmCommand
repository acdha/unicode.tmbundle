<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/python
# encoding: utf-8

import sys
import os
import codecs

sys.stdout = codecs.getwriter('utf-8')(sys.stdout)
sys.stdin  = codecs.getreader('utf-8')(sys.stdin)

bundleLibPath = os.environ["TM_BUNDLE_SUPPORT"] + "/lib/"

def wunichr(dec):
    return ("\\U%08X" % dec).decode("unicode-escape")

def codepoints(s):
    hs = 0
    for c in s:
        c = ord(c)
        if 0xdc00 &lt;= c &lt;= 0xdfff and hs:
            yield ((hs&amp;0x3ff)&lt;&lt;10 | (c&amp;0x3ff)) + 0x10000
            hs = 0
        elif 0xd800 &lt;= c &lt;= 0xdbff:
            hs = c
        else:
            yield c
    if hs:
        yield hs

def getBlockName(s):
    if 0x0000 &lt;= s &lt;= 0x007F:
        return "Basic Latin"
    elif 0x0080 &lt;= s &lt;= 0x00FF:
        return "Latin-1 Supplement"
    elif 0x0100 &lt;= s &lt;= 0x017F:
        return "Latin Extended-A"
    elif 0x0180 &lt;= s &lt;= 0x024F:
        return "Latin Extended-B"
    elif 0x0250 &lt;= s &lt;= 0x02AF:
        return "IPA Extensions"
    elif 0x02B0 &lt;= s &lt;= 0x02FF:
        return "Spacing Modifier Letters"
    elif 0x0300 &lt;= s &lt;= 0x036F:
        return "Combining Diacritical Marks"
    elif 0x0370 &lt;= s &lt;= 0x03FF:
        return "Greek and Coptic"
    elif 0x0400 &lt;= s &lt;= 0x04FF:
        return "Cyrillic"
    elif 0x0500 &lt;= s &lt;= 0x052F:
        return "Cyrillic Supplement"
    elif 0x0530 &lt;= s &lt;= 0x058F:
        return "Armenian"
    elif 0x0590 &lt;= s &lt;= 0x05FF:
        return "Hebrew"
    elif 0x0600 &lt;= s &lt;= 0x06FF:
        return "Arabic"
    elif 0x0700 &lt;= s &lt;= 0x074F:
        return "Syriac"
    elif 0x0750 &lt;= s &lt;= 0x077F:
        return "Arabic Supplement"
    elif 0x0780 &lt;= s &lt;= 0x07BF:
        return "Thaana"
    elif 0x07C0 &lt;= s &lt;= 0x07FF:
        return "NKo"
    elif 0x0900 &lt;= s &lt;= 0x097F:
        return "Devanagari"
    elif 0x0980 &lt;= s &lt;= 0x09FF:
        return "Bengali"
    elif 0x0A00 &lt;= s &lt;= 0x0A7F:
        return "Gurmukhi"
    elif 0x0A80 &lt;= s &lt;= 0x0AFF:
        return "Gujarati"
    elif 0x0B00 &lt;= s &lt;= 0x0B7F:
        return "Oriya"
    elif 0x0B80 &lt;= s &lt;= 0x0BFF:
        return "Tamil"
    elif 0x0C00 &lt;= s &lt;= 0x0C7F:
        return "Telugu"
    elif 0x0C80 &lt;= s &lt;= 0x0CFF:
        return "Kannada"
    elif 0x0D00 &lt;= s &lt;= 0x0D7F:
        return "Malayalam"
    elif 0x0D80 &lt;= s &lt;= 0x0DFF:
        return "Sinhala"
    elif 0x0E00 &lt;= s &lt;= 0x0E7F:
        return "Thai"
    elif 0x0E80 &lt;= s &lt;= 0x0EFF:
        return "Lao"
    elif 0x0F00 &lt;= s &lt;= 0x0FFF:
        return "Tibetan"
    elif 0x1000 &lt;= s &lt;= 0x109F:
        return "Myanmar"
    elif 0x10A0 &lt;= s &lt;= 0x10FF:
        return "Georgian"
    elif 0x1100 &lt;= s &lt;= 0x11FF:
        return "Hangul Jamo"
    elif 0x1200 &lt;= s &lt;= 0x137F:
        return "Ethiopic"
    elif 0x1380 &lt;= s &lt;= 0x139F:
        return "Ethiopic Supplement"
    elif 0x13A0 &lt;= s &lt;= 0x13FF:
        return "Cherokee"
    elif 0x1400 &lt;= s &lt;= 0x167F:
        return "Unified Canadian Aboriginal Syllabics"
    elif 0x1680 &lt;= s &lt;= 0x169F:
        return "Ogham"
    elif 0x16A0 &lt;= s &lt;= 0x16FF:
        return "Runic"
    elif 0x1700 &lt;= s &lt;= 0x171F:
        return "Tagalog"
    elif 0x1720 &lt;= s &lt;= 0x173F:
        return "Hanunoo"
    elif 0x1740 &lt;= s &lt;= 0x175F:
        return "Buhid"
    elif 0x1760 &lt;= s &lt;= 0x177F:
        return "Tagbanwa"
    elif 0x1780 &lt;= s &lt;= 0x17FF:
        return "Khmer"
    elif 0x1800 &lt;= s &lt;= 0x18AF:
        return "Mongolian"
    elif 0x1900 &lt;= s &lt;= 0x194F:
        return "Limbu"
    elif 0x1950 &lt;= s &lt;= 0x197F:
        return "Tai Le"
    elif 0x1980 &lt;= s &lt;= 0x19DF:
        return "New Tai Lue"
    elif 0x19E0 &lt;= s &lt;= 0x19FF:
        return "Khmer Symbols"
    elif 0x1A00 &lt;= s &lt;= 0x1A1F:
        return "Buginese"
    elif 0x1B00 &lt;= s &lt;= 0x1B7F:
        return "Balinese"
    elif 0x1B80 &lt;= s &lt;= 0x1BBF:
        return "Sundanese"
    elif 0x1C00 &lt;= s &lt;= 0x1C4F:
        return "Lepcha"
    elif 0x1C50 &lt;= s &lt;= 0x1C7F:
        return "Ol Chiki"
    elif 0x1D00 &lt;= s &lt;= 0x1D7F:
        return "Phonetic Extensions"
    elif 0x1D80 &lt;= s &lt;= 0x1DBF:
        return "Phonetic Extensions Supplement"
    elif 0x1DC0 &lt;= s &lt;= 0x1DFF:
        return "Combining Diacritical Marks Supplement"
    elif 0x1E00 &lt;= s &lt;= 0x1EFF:
        return "Latin Extended Additional"
    elif 0x1F00 &lt;= s &lt;= 0x1FFF:
        return "Greek Extended"
    elif 0x2000 &lt;= s &lt;= 0x206F:
        return "General Punctuation"
    elif 0x2070 &lt;= s &lt;= 0x209F:
        return "Superscripts and Subscripts"
    elif 0x20A0 &lt;= s &lt;= 0x20CF:
        return "Currency Symbols"
    elif 0x20D0 &lt;= s &lt;= 0x20FF:
        return "Combining Diacritical Marks for Symbols"
    elif 0x2100 &lt;= s &lt;= 0x214F:
        return "Letterlike Symbols"
    elif 0x2150 &lt;= s &lt;= 0x218F:
        return "Number Forms"
    elif 0x2190 &lt;= s &lt;= 0x21FF:
        return "Arrows"
    elif 0x2200 &lt;= s &lt;= 0x22FF:
        return "Mathematical Operators"
    elif 0x2300 &lt;= s &lt;= 0x23FF:
        return "Miscellaneous Technical"
    elif 0x2400 &lt;= s &lt;= 0x243F:
        return "Control Pictures"
    elif 0x2440 &lt;= s &lt;= 0x245F:
        return "Optical Character Recognition"
    elif 0x2460 &lt;= s &lt;= 0x24FF:
        return "Enclosed Alphanumerics"
    elif 0x2500 &lt;= s &lt;= 0x257F:
        return "Box Drawing"
    elif 0x2580 &lt;= s &lt;= 0x259F:
        return "Block Elements"
    elif 0x25A0 &lt;= s &lt;= 0x25FF:
        return "Geometric Shapes"
    elif 0x2600 &lt;= s &lt;= 0x26FF:
        return "Miscellaneous Symbols"
    elif 0x2700 &lt;= s &lt;= 0x27BF:
        return "Dingbats"
    elif 0x27C0 &lt;= s &lt;= 0x27EF:
        return "Miscellaneous Mathematical Symbols-A"
    elif 0x27F0 &lt;= s &lt;= 0x27FF:
        return "Supplemental Arrows-A"
    elif 0x2800 &lt;= s &lt;= 0x28FF:
        return "Braille Patterns"
    elif 0x2900 &lt;= s &lt;= 0x297F:
        return "Supplemental Arrows-B"
    elif 0x2980 &lt;= s &lt;= 0x29FF:
        return "Miscellaneous Mathematical Symbols-B"
    elif 0x2A00 &lt;= s &lt;= 0x2AFF:
        return "Supplemental Mathematical Operators"
    elif 0x2B00 &lt;= s &lt;= 0x2BFF:
        return "Miscellaneous Symbols and Arrows"
    elif 0x2C00 &lt;= s &lt;= 0x2C5F:
        return "Glagolitic"
    elif 0x2C60 &lt;= s &lt;= 0x2C7F:
        return "Latin Extended-C"
    elif 0x2C80 &lt;= s &lt;= 0x2CFF:
        return "Coptic"
    elif 0x2D00 &lt;= s &lt;= 0x2D2F:
        return "Georgian Supplement"
    elif 0x2D30 &lt;= s &lt;= 0x2D7F:
        return "Tifinagh"
    elif 0x2D80 &lt;= s &lt;= 0x2DDF:
        return "Ethiopic Extended"
    elif 0x2DE0 &lt;= s &lt;= 0x2DFF:
        return "Cyrillic Extended-A"
    elif 0x2E00 &lt;= s &lt;= 0x2E7F:
        return "Supplemental Punctuation"
    elif 0x2E80 &lt;= s &lt;= 0x2EFF:
        return "CJK Radicals Supplement"
    elif 0x2F00 &lt;= s &lt;= 0x2FDF:
        return "Kangxi Radicals"
    elif 0x2FF0 &lt;= s &lt;= 0x2FFF:
        return "Ideographic Description Characters"
    elif 0x3000 &lt;= s &lt;= 0x303F:
        return "CJK Symbols and Punctuation"
    elif 0x3040 &lt;= s &lt;= 0x309F:
        return "Hiragana"
    elif 0x30A0 &lt;= s &lt;= 0x30FF:
        return "Katakana"
    elif 0x3100 &lt;= s &lt;= 0x312F:
        return "Bopomofo"
    elif 0x3130 &lt;= s &lt;= 0x318F:
        return "Hangul Compatibility Jamo"
    elif 0x3190 &lt;= s &lt;= 0x319F:
        return "Kanbun"
    elif 0x31A0 &lt;= s &lt;= 0x31BF:
        return "Bopomofo Extended"
    elif 0x31C0 &lt;= s &lt;= 0x31EF:
        return "CJK Strokes"
    elif 0x31F0 &lt;= s &lt;= 0x31FF:
        return "Katakana Phonetic Extensions"
    elif 0x3200 &lt;= s &lt;= 0x32FF:
        return "Enclosed CJK Letters and Months"
    elif 0x3300 &lt;= s &lt;= 0x33FF:
        return "CJK Compatibility"
    elif 0x3400 &lt;= s &lt;= 0x4DBF:
        return "CJK Unified Ideographs Extension A"
    elif 0x4DC0 &lt;= s &lt;= 0x4DFF:
        return "Yijing Hexagram Symbols"
    elif 0x4E00 &lt;= s &lt;= 0x9FFF:
        return "CJK Unified Ideographs"
    elif 0xA000 &lt;= s &lt;= 0xA48F:
        return "Yi Syllables"
    elif 0xA490 &lt;= s &lt;= 0xA4CF:
        return "Yi Radicals"
    elif 0xA500 &lt;= s &lt;= 0xA63F:
        return "Vai"
    elif 0xA640 &lt;= s &lt;= 0xA69F:
        return "Cyrillic Extended-B"
    elif 0xA700 &lt;= s &lt;= 0xA71F:
        return "Modifier Tone Letters"
    elif 0xA720 &lt;= s &lt;= 0xA7FF:
        return "Latin Extended-D"
    elif 0xA800 &lt;= s &lt;= 0xA82F:
        return "Syloti Nagri"
    elif 0xA840 &lt;= s &lt;= 0xA87F:
        return "Phags-pa"
    elif 0xA880 &lt;= s &lt;= 0xA8DF:
        return "Saurashtra"
    elif 0xA900 &lt;= s &lt;= 0xA92F:
        return "Kayah Li"
    elif 0xA930 &lt;= s &lt;= 0xA95F:
        return "Rejang"
    elif 0xAA00 &lt;= s &lt;= 0xAA5F:
        return "Cham"
    elif 0xAC00 &lt;= s &lt;= 0xD7AF:
        return "Hangul Syllables"
    elif 0xD800 &lt;= s &lt;= 0xDB7F:
        return "High Surrogates"
    elif 0xDB80 &lt;= s &lt;= 0xDBFF:
        return "High Private Use Surrogates"
    elif 0xDC00 &lt;= s &lt;= 0xDFFF:
        return "Low Surrogates"
    elif 0xE000 &lt;= s &lt;= 0xF8FF:
        return "Private Use Area"
    elif 0xF900 &lt;= s &lt;= 0xFAFF:
        return "CJK Compatibility Ideographs"
    elif 0xFB00 &lt;= s &lt;= 0xFB4F:
        return "Alphabetic Presentation Forms"
    elif 0xFB50 &lt;= s &lt;= 0xFDFF:
        return "Arabic Presentation Forms-A"
    elif 0xFE00 &lt;= s &lt;= 0xFE0F:
        return "Variation Selectors"
    elif 0xFE10 &lt;= s &lt;= 0xFE1F:
        return "Vertical Forms"
    elif 0xFE20 &lt;= s &lt;= 0xFE2F:
        return "Combining Half Marks"
    elif 0xFE30 &lt;= s &lt;= 0xFE4F:
        return "CJK Compatibility Forms"
    elif 0xFE50 &lt;= s &lt;= 0xFE6F:
        return "Small Form Variants"
    elif 0xFE70 &lt;= s &lt;= 0xFEFF:
        return "Arabic Presentation Forms-B"
    elif 0xFF00 &lt;= s &lt;= 0xFFEF:
        return "Halfwidth and Fullwidth Forms"
    elif 0xFFF0 &lt;= s &lt;= 0xFFFF:
        return "Specials"
    elif 0x10000 &lt;= s &lt;= 0x1007F:
        return "Linear B Syllabary"
    elif 0x10080 &lt;= s &lt;= 0x100FF:
        return "Linear B Ideograms"
    elif 0x10100 &lt;= s &lt;= 0x1013F:
        return "Aegean Numbers"
    elif 0x10140 &lt;= s &lt;= 0x1018F:
        return "Ancient Greek Numbers"
    elif 0x10190 &lt;= s &lt;= 0x101CF:
        return "Ancient Symbols"
    elif 0x101D0 &lt;= s &lt;= 0x101FF:
        return "Phaistos Disc"
    elif 0x10280 &lt;= s &lt;= 0x1029F:
        return "Lycian"
    elif 0x102A0 &lt;= s &lt;= 0x102DF:
        return "Carian"
    elif 0x10300 &lt;= s &lt;= 0x1032F:
        return "Old Italic"
    elif 0x10330 &lt;= s &lt;= 0x1034F:
        return "Gothic"
    elif 0x10380 &lt;= s &lt;= 0x1039F:
        return "Ugaritic"
    elif 0x103A0 &lt;= s &lt;= 0x103DF:
        return "Old Persian"
    elif 0x10400 &lt;= s &lt;= 0x1044F:
        return "Deseret"
    elif 0x10450 &lt;= s &lt;= 0x1047F:
        return "Shavian"
    elif 0x10480 &lt;= s &lt;= 0x104AF:
        return "Osmanya"
    elif 0x10800 &lt;= s &lt;= 0x1083F:
        return "Cypriot Syllabary"
    elif 0x10900 &lt;= s &lt;= 0x1091F:
        return "Phoenician"
    elif 0x10920 &lt;= s &lt;= 0x1093F:
        return "Lydian"
    elif 0x10A00 &lt;= s &lt;= 0x10A5F:
        return "Kharoshthi"
    elif 0x12000 &lt;= s &lt;= 0x123FF:
        return "Cuneiform"
    elif 0x12400 &lt;= s &lt;= 0x1247F:
        return "Cuneiform Numbers and Punctuation"
    elif 0x1D000 &lt;= s &lt;= 0x1D0FF:
        return "Byzantine Musical Symbols"
    elif 0x1D100 &lt;= s &lt;= 0x1D1FF:
        return "Musical Symbols"
    elif 0x1D200 &lt;= s &lt;= 0x1D24F:
        return "Ancient Greek Musical Notation"
    elif 0x1D300 &lt;= s &lt;= 0x1D35F:
        return "Tai Xuan Jing Symbols"
    elif 0x1D360 &lt;= s &lt;= 0x1D37F:
        return "Counting Rod Numerals"
    elif 0x1D400 &lt;= s &lt;= 0x1D7FF:
        return "Mathematical Alphanumeric Symbols"
    elif 0x1F000 &lt;= s &lt;= 0x1F02F:
        return "Mahjong Tiles"
    elif 0x1F030 &lt;= s &lt;= 0x1F09F:
        return "Domino Tiles"
    elif 0x20000 &lt;= s &lt;= 0x2A6DF:
        return "CJK Unified Ideographs Extension B"
    elif 0x2F800 &lt;= s &lt;= 0x2FA1F:
        return "CJK Compatibility Ideographs Supplement"
    elif 0xE0000 &lt;= s &lt;= 0xE007F:
        return "Tags"
    elif 0xE0100 &lt;= s &lt;= 0xE01EF:
        return "Variation Selectors Supplement"
    elif 0xF0000 &lt;= s &lt;= 0xFFFFF:
        return "Supplementary Private Use Area-A"
    elif 0x100000 &lt;= s &lt;= 0x10FFFF:
        return "Supplementary Private Use Area-B"
    else:
        return "unknown"

def rangeName(dec):
    if 0x3400 &lt;= dec &lt;= 0x4DB5:
        return  "CJK Ideograph Extension A"
    elif 0x4E00 &lt;= dec &lt;= 0x9FC3:
        return  "CJK Ideograph"
    elif 0xAC00 &lt;= dec &lt;= 0xD7A3: # Hangul
        return  unicodedata.name(unichr(dec), "U+%04X" % dec)
    elif 0xD800 &lt;= dec &lt;= 0xDB7F:
        return  "Non Private Use High Surrogate"
    elif 0xDB80 &lt;= dec &lt;= 0xDBFF:
        return  "Private Use High Surrogate"
    elif 0xDC00 &lt;= dec &lt;= 0xDFFF:
        return  "Low Surrogate"
    elif 0xE000 &lt;= dec &lt;= 0xF8FF:
        return  "Private Use"
    elif 0x20000 &lt;= dec &lt;= 0x2A6D6:
        return  "CJK Ideograph Extension B"
    elif 0xF0000 &lt;= dec &lt;= 0xFFFFD:
        return  "Plane 15 Private Use"
    elif 0x100000 &lt;= dec &lt;= 0x10FFFD:
        return  "Plane 16 Private Use"
    else:
        return  "not defined"


text = list(codepoints(sys.stdin.read()))

print "&lt;html&gt; \
&lt;head&gt;&lt;title&gt;Character Inventory&lt;/title&gt; \
&lt;script type='text/javascript'&gt;//&lt;![CDATA[ \n\
function sortTable2(col) { \n\
  var tblEl = document.getElementById('theTable'); \n\
  if (tblEl.reverseSort == null) \n\
    tblEl.reverseSort = new Array(); \n\
  if (col == tblEl.lastColumn) \n\
    tblEl.reverseSort[col] = !tblEl.reverseSort[col]; \n\
  tblEl.lastColumn = col; \n\
  var oldDsply = tblEl.style.display; \n\
  tblEl.style.display = 'none'; \n\
  var tmpEl; \n\
  var i, j; \n\
  var minVal, minIdx; \n\
  var testVal; \n\
  var cmp; \n\
  for (i = 0; i &lt; tblEl.rows.length - 1; i++) { \n\
    minIdx = i; \n\
    minVal = getTextValue(tblEl.rows[i].cells[col]); \n\
    for (j = i + 1; j &lt; tblEl.rows.length; j++) { \n\
      testVal = getTextValue(tblEl.rows[j].cells[col]); \n\
      cmp = compareValues(minVal, testVal); \n\
      if (tblEl.reverseSort[col]) \n\
        cmp = -cmp; \n\
      if (cmp &gt; 0) { \n\
        minIdx = j; \n\
        minVal = testVal; \n\
      } \n\
    } \n\
    if (minIdx &gt; i) { \n\
      tmpEl = tblEl.removeChild(tblEl.rows[minIdx]); \n\
      tblEl.insertBefore(tmpEl, tblEl.rows[i]); \n\
    } \n\
  } \n\
  tblEl.style.display = oldDsply; \n\
  return false; \n\
} \n\
if (document.ELEMENT_NODE == null) { \n\
  document.ELEMENT_NODE = 1; \n\
  document.TEXT_NODE = 3; \n\
} \n\
function getTextValue(el) { \n\
  var i; \n\
  var s; \n\
  s = ''; \n\
  for (i = 0; i &lt; el.childNodes.length; i++) \n\
    if (el.childNodes[i].nodeType == document.TEXT_NODE) \n\
      s += el.childNodes[i].nodeValue; \n\
    else if (el.childNodes[i].nodeType == document.ELEMENT_NODE &amp;&amp; \n\
             el.childNodes[i].tagName == 'BR') \n\
      s += ' '; \n\
    else \n\
      s += getTextValue(el.childNodes[i]); \n\
  return normalizeString(s); \n\
} \n\
function compareValues(v1, v2) { \n\
  var f1, f2; \n\
  f1 = parseFloat(v1); \n\
  f2 = parseFloat(v2); \n\
  if (!isNaN(f1) &amp;&amp; !isNaN(f2)) { \n\
    v1 = f1; \n\
    v2 = f2; \n\
  } \n\
  if (v1 == v2) \n\
    return 0; \n\
  if (v1 &gt; v2) \n\
    return 1 \n\
  return -1; \n\
} \n\
var whtSpEnds = new RegExp('^\\s*|\\s*$', 'g'); \n\
var whtSpMult = new RegExp('\\s\\s+', 'g'); \n\
function normalizeString(s) { \n\
  s = s.replace(whtSpMult, ' ');  // Collapse any multiple whites space. \n\
  s = s.replace(whtSpEnds, '');   // Remove leading or trailing white space. \n\
  return s; \n\
} \n\
//]]&gt;&lt;/script&gt; \n\
&lt;style type='text/css'&gt; \n\
th { \n\
font-size:8pt; \n\
text-align:left; \n\
} \n\
table {border:1px solid #silver;border-collapse: collapse;} \n\
td {padding:1mm;} \n\
.a { \n\
text-align:center; \n\
} \n\
&lt;/style&gt; \n\
&lt;/head&gt; \n\
&lt;body&gt; \n\
&lt;p style='font-size:10pt;text-align:right;'&gt;&lt;i&gt;"
print str(len(text)) + " characters in total&lt;br&gt;"

chKeys = {}
for c in text:
    try:
        chKeys[c] += 1
    except:
        chKeys[c] = 1

keys = chKeys.keys()
keys.sort()

print str(len(keys)) + " distinct characters&lt;/i&gt;&lt;/p&gt;&lt;br&gt;&lt;div id='1'&gt;&lt;table border=1&gt;&lt;tr&gt;&lt;th&gt;&lt;a href='' onclick='return sortTable2(0)'&gt;Character&lt;/a&gt;&lt;/th&gt;&lt;th&gt;&lt;a href='' onclick='return sortTable2(1)'&gt;Occurrences&lt;/a&gt;&lt;/th&gt;&lt;th&gt;&lt;a href='' onclick='return sortTable2(0)'&gt;UCS&lt;/a&gt;&lt;/th&gt;&lt;th&gt;&lt;a href='' onclick='return sortTable2(3)'&gt;Unicode Block&lt;/a&gt;&lt;/th&gt;&lt;th&gt;&lt;a href='' onclick='return sortTable2(4)'&gt;Unicode Name&lt;/a&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tbody id='theTable'&gt;"

regExp = []
data = {}
for ch in keys:
    hexCode = "%04X" % int(ch)
    regExp.append(hexCode)
    UnicodeData = os.popen("zgrep -E '^(" + "|".join(regExp) + ");' '" + bundleLibPath + "UnicodeData.txt.zip'").read().decode("UTF-8")
    for c in UnicodeData.split('\n'):
        uniData = c.strip().split(';')
        if len(uniData) &gt; 1:
            data[uniData[0]] = uniData[1]
for c in keys:
    if c != 10:
        try:
            name = data["%04X" % int(c)]
        except:
            name = rangeName(c)
        if name[0] == '&lt;':
            name = rangeName(c)
        if c == 9:
            char = ""
        else:
            char = eval('u"\U%08X"' % c)
        print "&lt;tr&gt;&lt;td class='a'&gt;", wunichr(c), "&lt;/td&gt;&lt;td class='a'&gt;", chKeys[c], "&lt;/td&gt;&lt;td&gt;", "U+%04X" % int(c), "&lt;/td&gt;&lt;td&gt;", getBlockName(c), "&lt;/td&gt;&lt;td&gt;", name, "&lt;/tr&gt;"

print "&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;"
print "&lt;/body&gt;&lt;/html&gt;"</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>^~@u</string>
	<key>name</key>
	<string>Show Character Inventory</string>
	<key>output</key>
	<string>showAsHTML</string>
	<key>uuid</key>
	<string>515AD461-0C81-4238-8E17-180920023406</string>
</dict>
</plist>
